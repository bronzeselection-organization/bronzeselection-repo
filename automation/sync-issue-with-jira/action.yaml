name: Sync GitHub issues to Jira
description: 'Action to sync GitHub issues to Jira by using Jira webhooks & automated actions.'
inputs:
  webhook-url:
    description: >
      Jira integration webhook URL.
      It should be stored as a secret as anyone who has access to it can post to your Jira board.
    required: true
  label:
    description: 'Label which will trigger a Jira import.'
    required: true
    default: 'jira'

runs:
  using: composite
  steps:
    - name: Dump GitHub context
      run: echo '${{ toJSON(github) }}'
      shell: bash
    - name: Restrict action to labelled issues and issue comments
      run: |
        set -eux

        echo "needsJiraUpdate=false" >> $GITHUB_ENV

        if [ ${{ github.event_name }} != "issues" ] && [ ${{ github.event_name }} != "issue_comment" ]; then
          echo "This action only work on issue events. Please use on: issues or issue_comment to use this action."
          exit 1
        fi

        if [ ${{ github.event.issue.pull_request }} ]; then
          echo "This action works only on issues, not pull requests."
          exit 0
        fi

        # Issue creation with label will trigger 2 events and run twice: one create, one labelled.
        # We want to focus only on labelling then for creating issues Jira-side.
        if [ ${{ github.event_name }} == "issues" ] && [ ${{ github.event.action }} == "opened" ]; then
          echo "Ignoring issue creation as a label will trigger a second event."
          exit 0
        fi

        # We only operate on labelled issues or issues that are just unlabeled with our desided label ('jira' by default)
        ## check if one of labels is our 'jira' label
        toConsider=${{ contains(github.event.issue.labels.*.name, inputs.label) }}

        ## second chance, this is just been unlabeled and needs to be deleted on Jira
        if [ ${{ github.event.action }} == "unlabeled" ] && [ ${{ github.event.label.name }} == ${{ inputs.label }} ]; then
          toConsider=true
        fi
        if [ "${toConsider}" == false ]; then
          echo "Our desired label was not found on issue or not unlabeled, skipping"
          exit 0
        fi

        # And finally, for the "labeled" event, we are only interested if the new added label is our desired one.
        if [ ${{ github.event.action }} == "labeled" ] && [ ${{ github.event.label.name }} != ${{ inputs.label }} ]; then
          echo "Not interested in this action, skipping."
          exit 0
        fi

        # The last one wins
        echo "needsJiraUpdate=true" >> $GITHUB_ENV
      shell: bash

    - name: Update Jira
      if: ${{ env.NeedsJiraUpdate == 'true' }}
      env:
        # ID is the html url to keep a link between systems as there is no way to force an ID on Jira side
        id: ${{ github.event.issue.html_url }}
        title: ${{ github.event.issue.title }}
        body: ${{ github.event.issue.body }}
        author: ${{ github.event.issue.user.login }}
        commentAuthor: ${{ github.actor }}
        comment: ${{ github.event.comment.body }}

      run: |
        set -eux

        # Converty markdown to Jira using mistletoe package.
        # Since GH runners only have LTS versions it's safe to only check for focal which doesn't have the package.
        if [ $(lsb_release -c -s) == "focal" ];then
          echo "Converting markdown to Jira is only possible with Ubuntu 22.04 (jammy). Pushing verbatim content to Jira..."
        else
          TMPDIR=$(mktemp -d)
          trap 'rm -rf -- $"TMPDIR"' EXIT

          sudo apt install -y python3-mistletoe
          echo ${body} > $TMPDIR/body.md
          echo ${comment} > $TMPDIR/comment.md
          body=$(PYTHONPATH=/usr/share/doc/python3-mistletoe mistletoe -r examples.jira_renderer.JIRARenderer $TMPDIR/body.md)
          comment=$(PYTHONPATH=/usr/share/doc/python3-mistletoe mistletoe -r examples.jira_renderer.JIRARenderer $TMPDIR/comment.md)
        fi

        description="${body}

        Opened by ${author}."

        commentContent=""

        # Choose Jira action based on event type and action.
        action=""
        if [ ${{ github.event_name }} == "issues" ]; then
          action=Update
          if [ ${{ github.event.action }} == "labeled" ]; then
            action=Create
          elif [ ${{ github.event.action }} == "reopened"" ]; then
            action=Reopen
          elif [ ${{ github.event.action }} == "deleted" ] || [ ${{ github.event.action }} == "unlabeled" ]; then
            # Note: deleting issue from GH is not supported ATM as there is no more label attached. unlabeled is supported.
            action=Delete
          elif [ ${{ github.event.action }} == "closed" ]; then
            action=Closed
          fi
        else
          action=AddComment
          if [ ${{ github.event.action }} == "deleted" ]; then
            echo "Deleting comment on Jira is not supported at the moment, skipping."
            exit 0
          fi
          # For now, editing comments will add new one on Jira.
          commentContent="From ${commentAuthor}:
          ${comment}"
        fi

        echo "PUSING: $id, $action, $title, $description, $commentContent"

        # Push to Jira as a json data format
        data=$(jq -n \
                  --arg id "$id" \
                  --arg action "$action" \
                  --arg title "$title" \
                  --arg description "$description" \
                  --arg commentContent "$commentContent" \
                  '{data: {id: $id, action: $action, title: $title, description: $description, commentContent: $commentContent}}')
        curl -X POST -H 'Content-type: application/json' --data "${data}" '${{ inputs.webhook-url }}'
      shell: bash
